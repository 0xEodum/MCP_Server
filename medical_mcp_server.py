from __future__ import annotations

import os
import time
import json
from dataclasses import asdict, is_dataclass
from typing import Any, Dict, List, Optional
from pathlib import Path

# --- Medical RAG stack ---
from medical_qdrant_api import MedicalQdrantStore
from medical_embedding_api import MedicalEmbedder
from medical_indexer import (
    index_medical_documents,
    DISEASE_REGISTRY,
    DISEASE_OVERVIEW,
    DISEASE_SECTIONS,
)
from medical_search import (
    normalize_medical_query,
    get_disease_overview,
    get_disease_sections,
    medical_search_workflow,
)

# --- MCP SDK ---
MCP_MODE = None
try:
    from mcp.server.fastmcp import FastMCP

    MCP_MODE = "fast"
except Exception:
    try:
        from mcp.server import Server, stdio

        MCP_MODE = "base"
    except Exception:
        MCP_MODE = None

# --------------------
# Configuration
# --------------------
DEFAULT_MODEL = "intfloat/multilingual-e5-small"
QDRANT_URL = "http://localhost:6333"
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")

_medical_store: Optional[MedicalQdrantStore] = None
_medical_embedder: Optional[MedicalEmbedder] = None

def _ensure_medical_deps() -> tuple[MedicalQdrantStore, MedicalEmbedder]:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    global _medical_store, _medical_embedder
    if _medical_store is None:
        _medical_store = MedicalQdrantStore(url=QDRANT_URL, api_key=QDRANT_API_KEY)
    if _medical_embedder is None:
        _medical_embedder = MedicalEmbedder(DEFAULT_MODEL)
    return _medical_store, _medical_embedder



def _pack(obj: Any) -> Any:
    """Convert dataclasses to JSON-compatible dicts."""
    if is_dataclass(obj):
        return {k: _pack(v) for k, v in asdict(obj).items()}
    if isinstance(obj, list):
        return [_pack(x) for x in obj]
    if isinstance(obj, dict):
        return {k: _pack(v) for k, v in obj.items()}
    return obj


# --------------------
# Original RAG Tools
# --------------------
async def t_ping() -> Dict[str, Any]:
    s, _ = _ensure_medical_deps()
    return {"ok": s.ping(), "ts": int(time.time())}


# --------------------
# Medical Tools
# --------------------

async def t_medical_normalize_query(
        *,
        query: str,
        top_k: int = 5,
        score_threshold: float = 0.6,
        enable_reranking: bool = True,
        rerank_top_k: int = 5,
) -> Dict[str, Any]:
    """
    –≠–¢–ê–ü 1: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    store, emb = _ensure_medical_deps()

    try:
        result = normalize_medical_query(
            store,
            emb,
            query,
            top_k=top_k,
            score_threshold=score_threshold,
            enable_reranking=enable_reranking,
            rerank_top_k=rerank_top_k
        )
        result["tool"] = "medical_normalize_query"
        result["stage"] = "normalization"
        return result
    except Exception as e:
        return {
            "tool": "medical_normalize_query",
            "error": str(e),
            "query": query
        }


async def t_medical_get_overview(
        *,
        disease_ids: List[str],
        query: Optional[str] = None,
        top_k: int = 5,
) -> Dict[str, Any]:
    """
    –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö
    """
    store, emb = _ensure_medical_deps()

    try:
        result = get_disease_overview(
            store,
            emb,
            disease_ids,
            query=query,
            top_k=top_k
        )
        out = _pack(result)
        out["tool"] = "medical_get_overview"
        out["stage"] = "overview"
        return out
    except Exception as e:
        return {
            "tool": "medical_get_overview",
            "error": str(e),
            "disease_ids": disease_ids
        }


async def t_medical_get_sections(
        *,
        disease_id: str,
        section_ids: Optional[List[str]] = None,
        query: Optional[str] = None,
        top_k: int = 10,
) -> Dict[str, Any]:
    """
    –≠–¢–ê–ü 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    store, emb = _ensure_medical_deps()

    try:
        result = get_disease_sections(
            store,
            disease_id,
            section_ids=section_ids,
            query=query,
            embedder=emb if query else None,
            top_k=top_k
        )
        out = _pack(result)
        out["tool"] = "medical_get_sections"
        out["stage"] = "sections"
        return out
    except Exception as e:
        return {
            "tool": "medical_get_sections",
            "error": str(e),
            "disease_id": disease_id
        }


# --------------------
# MCP Registration
# --------------------

def _register_fast() -> None:
    """FastMCP registration with medical tools."""
    from mcp.server.fastmcp import FastMCP

    mcp = FastMCP("medical-rag", host="0.0.0.0", port=8000)

    # Health check
    @mcp.tool()
    async def ping() -> dict:
        """Health check for Qdrant and embeddings."""
        return await t_ping()

    # Medical tools (primary)
    @mcp.tool()
    async def medical_normalize_query(
            query: str,
            top_k: int = 5,
            score_threshold: float = 0.6,
            enable_reranking: bool = True,
            rerank_top_k: int = 3,
    ) -> dict:
        """
        –≠–¢–ê–ü 1: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.
        –≠—Ç–æ –ü–ï–†–í–´–ô –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.

        –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
        - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö, –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö, –ª–µ—á–µ–Ω–∏–∏
        - –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º—è–Ω—É–ª –∫–æ–¥ –ú–ö–ë-10
        - –ù–∞—á–∞–ª–æ –ª—é–±–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞

        –ü–ê–†–ê–ú–ï–¢–†–´:
        - query: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø–µ—Ä–∏–∫–∞—Ä–¥–∏—Ç—ã", "—Ä–µ—Ç–∏–Ω–æ–±–ª–∞—Å—Ç–æ–º–∞")
        - top_k: —Å–∫–æ–ª—å–∫–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞–π—Ç–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3-5)
        - score_threshold: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (0.6 –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤)
        - enable_reranking: —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π True)
        - rerank_top_k: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ top_k

        –í–û–ó–í–†–ê–©–ê–ï–¢:
        - found_diseases: —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π —Å disease_id –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        - has_icd_matches: –Ω–∞–π–¥–µ–Ω—ã –ª–∏ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ú–ö–ë-10
        - reranking_applied: –ø—Ä–∏–º–µ–Ω—è–ª—Å—è –ª–∏ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        üí° –°–û–í–ï–¢: –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π medical_get_overview –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        return await t_medical_normalize_query(
            query=query,
            top_k=top_k,
            score_threshold=score_threshold,
            enable_reranking=enable_reranking,
            rerank_top_k=rerank_top_k
        )

    @mcp.tool()
    async def medical_get_overview(
            disease_ids: List[str],
            query: Optional[str] = None,
            top_k: int = 5,
    ) -> dict:
        """
        –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        –ò—Å–ø–æ–ª—å–∑—É–π –ü–û–°–õ–ï medical_normalize_query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

        –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
        - –ü–æ–ª—É—á–∏–ª disease_ids –æ—Ç medical_normalize_query
        - –ù—É–∂–Ω–∞ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏
        - –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        - –ù—É–∂–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–≥–ª—É–±–ª–µ–Ω–∏–µ–º –≤ –¥–µ—Ç–∞–ª–∏

        –ü–ê–†–ê–ú–ï–¢–†–´:
        - disease_ids: —Å–ø–∏—Å–æ–∫ ID –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π (–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ medical_normalize_query)
        - query: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        - top_k: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        –í–û–ó–í–†–ê–©–ê–ï–¢:
        - found_diseases: —Å–ø–∏—Å–æ–∫ —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
        - available_sections: –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            * id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è medical_get_sections
            * title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–∏–º–ø—Ç–æ–º—ã", "–õ–µ—á–µ–Ω–∏–µ")
            * has_content: –µ—Å—Ç—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ

        –°–û–í–ï–¢: –ò–∑—É—á–∏ available_sections –∏ –∏—Å–ø–æ–ª—å–∑—É–π medical_get_sections –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.
        """
        return await t_medical_get_overview(
            disease_ids=disease_ids,
            query=query,
            top_k=top_k
        )

    @mcp.tool()
    async def medical_get_sections(
            disease_id: str,
            section_ids: Optional[List[str]] = None,
            query: Optional[str] = None,
            top_k: int = 10,
    ) -> dict:
        """
        –≠–¢–ê–ü 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏.
        –≠—Ç–æ –§–ò–ù–ê–õ–¨–ù–´–ô —ç—Ç–∞–ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

        –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
        - –ü–æ–ª—É—á–∏–ª disease_id –æ—Ç medical_get_overview
        - –ù—É–∂–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö, –ª–µ—á–µ–Ω–∏–∏, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–æ–ª–µ–∑–Ω–∏
        - –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤

        –ü–ê–†–ê–ú–ï–¢–†–´:
        - disease_id: ID –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è (–∏–∑ medical_get_overview)
        - section_ids: —Å–ø–∏—Å–æ–∫ ID —Ä–∞–∑–¥–µ–ª–æ–≤ (–∏–∑ available_sections –≤ overview)
            * –ü—Ä–∏–º–µ—Ä—ã: ["symptoms", "treatment", "diagnosis", "complications"]
            * –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å - –ø–æ–ª—É—á–∏—à—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        - query: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        - top_k: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ

        –í–û–ó–í–†–ê–©–ê–ï–¢:
        - disease_id: ID –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
        - canonical_name: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
        - sections: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            * section_id: ID —Ä–∞–∑–¥–µ–ª–∞
            * section_title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            * content: –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞
            * content_length: –¥–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            * score: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è query)

        –°–¢–†–ê–¢–ï–ì–ò–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã:
        medical_get_sections(disease_id="doc_abc123")
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:
        medical_get_sections(disease_id="doc_abc123", section_ids=["doc_terms", "doc_crat_info_1_1"])
        –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:
        medical_get_sections(disease_id="doc_abc123", query="–∞–Ω–∞–º–Ω–µ–∑")
        """
        return await t_medical_get_sections(
            disease_id=disease_id,
            section_ids=section_ids,
            query=query,
            top_k=top_k
        )

    mcp.run(transport="streamable-http")


def _register_base() -> None:
    """Base Server registration (stdio transport)."""
    # Similar registration but with base Server API
    # Skipping for brevity - would mirror the FastMCP version
    pass


if __name__ == "__main__":
    print("=== Medical RAG MCP Server ===")
    print("Collections:")
    print(f"  - {DISEASE_REGISTRY} (disease registry)")
    print(f"  - {DISEASE_OVERVIEW} (disease overview)")
    print(f"  - {DISEASE_SECTIONS} (disease sections)")
    print()
    print("Medical workflow:")
    print("  1. medical_normalize_query - find diseases by user query (with reranking)")
    print("  2. medical_get_overview - get disease info + available sections")
    print("  3. medical_get_sections - get specific sections content")
    print()
    print(f"Using model: {DEFAULT_MODEL}")
    print(f"Vector size: Expected ~1024 (E5-Large)")
    print()

    if MCP_MODE == "fast":
        print("Starting with FastMCP...")
        _register_fast()
    elif MCP_MODE == "base":
        print("Starting with base MCP...")
        _register_base()
    else:
        print("MCP SDK not found. Install: pip install mcp")
        print("Then run: python medical_mcp_server.py")